 Fang (Fiona) Fang    page 1  Winter 2023 WESTERN UNIVERSITY - CANADA FACULTY OF ENGINEERING  DEPARTMENT OF ELECTRICAL AND COMPUTER ENGINEERING   SE 3314B – COMPUTER NETWORKS APPLICATIONS   Assignment 3:  Peer-to-Peer DHT Search    Due Date: April 10, 2023 This assignment is to be done individually. Cheating is prohibited in this assignment, that is not to show your code to any other student, do not look at any other student's code, and do not put your code in any public domain. However, getting help is easy and available, just ask the instructor or the TAs.  At the same time, you are encouraged to discuss your problems (if any) with other students in general terms, but the actual program design and code must be your own.  Please note that the consequences of cheating are much, much worse than getting a low mark for that particular item of work. The very best case is that you get a zero for the whole thing. Keep in mind that turning in your own work would have at least gotten you a few marks, better than a zero. Code submissions will be graded manually, and the code similarity check will be made using the similarity-detection software system.  In this assignment you are to build a peer-to-peer (p2p) Kademlia network and perform a search for an image on the p2p DHT based-network. Particularly, you will implement a KAD peer node similar to the one you implemented for assignment 2. This peer node will also support client image query to search for images. Again, please before you continue working on this assignment, you must refresh your knowledge, on how the DHT and Kademlia network built and works. Your first task is to write a KADpeer node. If you've implemented assignment 2 and have decided to build this assignment on top of your working code for assignment 2, you're done with the first task of this assignment. If you have not implemented assignment 2, no problem you still have the chance to practice socket-programming in this assignment by exploring, studying, and using the given code for KADpeer node that is included as a sample solution for assignment2. It is also expected, but not necessarily, to re-use some of the methods that is built for the previous two assignments. To make this assignment short, we will assign the responsibilities of the keys manually into the KAD peers. We will assign one key (image file) to each peer within a KAD network of 5 peers only. To do so, we will have the following assumptions:  The peer ID is the hash value of the peer’s IP and port numbers  The key ID is the hash value of the image name.   The port numbers of the image sockets are any random number greater than 3000 and less than 5000.  Fang (Fiona) Fang      page 2  Winter 2023  Each peer will have an image with a keyID that is closed to the peer ID. To do so, we will assign the port numbers of the peers (to be used for the peer sockets) as follows. o peer1  port 2001 o peer2  port 2055 o peer3  port 2077 o peer4  port 2044 o peer5  port 2005  We will create five folders and add one image in each folder as per the following assignment: o Folder named “peer1” has the image “Canna.gif” o Folder named “peer2” has the image “Flicker.jpeg” o Folder named “peer3” has the image “CherryBlossom.gif” o Folder named “peer4” has the image “Parrot.jpeg” o Folder named “peer5” has the image “Cardinal.jpeg”  Once the new peer (the sender peer) wishes to connect to any KAD peer (the receiver peer), it will recognize the image file it has in its main folder and then generate an image ID for it. These images, from all peers, are the keys that we need to share within the DHT Kademlia network. To do so, each peer will maintain a local keys list  to record the IDs of its local images (one image in our case), each element in this list is a pair of image ID and the corresponding image name. As we did in assignment2, we will also use the cryptographic hash function SHA-1 to generate the images IDs. The code of the SHA-1 is given with the Singleton.js file along with the sample solution of assignmnet2, feel free to call the method getKeyID() whenever you need to generate an ID for a given image. For example, if the image name is “CherryBlossom.gif”, then the ID of this image is equal to the output of singleton.getKeyID(“CherryBlossom.gif”) .  Your next task is to integrate the server functionality described in assignment 1 (that accept image query request and then respond by sending the requested image) with the functionality of the KADpeer program from assignment 2 in a new program (server) which we will call it KADpeerDB . This new server will use two different ports: one to handle KAD network traffic and another to handle image query traffic. You get the first when you instantiate a peer object, which will accept peer join requests. The second comes with the instantiation of the image object, which will accept image query requests. We will call the former the peer socket and the latter the image socket  henceforth. We will use one image socket for both client query and peer image-search reply (next task). When a client queries for an image (using GetImage  client program), the server peer first searches its own database (or rather, its local keys list) for the requested file name. If the image is found, it is returned to the client using the ITP response packet format (see Figure 2) and the connection is then closed. If the requested image is not found, the server peer (we well call it the originating peer) will search for this image in the KAD network on behalf of the client. We will discuss how to handle KAD search in the next task. To keep things simpler for you, you always search for images that exist in the KAD network.  At this point, you should test your code and verify that your GetImage  client and KADpeerDB  server work as in assignment 1 to serve up image files that are local to the server. When a peer N cannot find the requested key K locally, N will try to find the closest peer P in KAD network that contains the value associated with the key K. To do so, a search packet is sent (using the peer socket) to the closest peer in N’s DHT table. The method is using search/query packet format described in Figure1 below. When a search packet arrives at a peer, the recipient peer must also check whether it has the  Fang (Fiona) Fang       page 3  Winter 2023 requested image. If it does not have a copy of the image, the peer forwards the search packet further to the closest peer to the key in its DHT table, and the process continues. When a queried image is found, say in peer M, then M creates a new socket and connects to the originating peer at the address and port number listed in the search packet (again using the peer socket ). Once the image transfer is completed, the connection is closed by the peer initiating the transfer. The originating peer then forwards the received image to the client requesting it using the image socket  and closes the connection to the client.   0 0 1 2 3 4 5 6 7 8 9 1 0 1 2 3 4 5 6 7 8 9 2 0 1 2 3 4 5 6 7 8 9 3 0 1 V=7 Message Type  Reserved  Sender name length  Sender name  Originating peer’s IPv4 address Originating peer’s image socket port number   IT Image file name size in byte Image file name   Figure 1: The kadPTP search request packet format Here are the descriptions of the kadPTP search request packet fields:   (V) is a 4-bit kadPTP version field. You must set this to 7.   The message type is one byte to represent the message type; the value 3 means ‘ Search’ type.  Reserved is an 8-bit field, not used in this assignment.   The Sender name field holds the message sender name, the size of this field is dictated by the Sender name length field above.   After the sender’s name, the search packet must carry the originating peer's IP address and its image socket's port number.  Again, the port number in the search message is that of the image socket, NOT the peer socket. The peer initiating an image search sends a copy of this search packet to the closest peer to the key in its DHT table.   (IT) Image Type is a 4-bit field, part of the payload, indicates the type of the images as follows: 1 - BMP, 2 - JPEG, 3 - GIF, 4 - PNG, 5 - TIFF, and 15 – RAW.  The file name size is a 28-bit field hold the number of bytes needed to store the image file name.  The image file name, without the file extension is a field to store the name of the requested image. The size of this field is equal to the length of the image file name. Once the originating peer received (or already has) the requested image, it transfers the image to the client using the same protocol developed in assignment 1, you MUST precede the image with the ITP response packet format as follows:  0 1 2 3 4 5 6 7 8 9 1 0 1 2 3 4 5 6 7 8 9 2 0 1 2 3 4 5 6 7 8 9 3 0 1 V=7 Response Type  Sequence number  Timestamp  Image size in byte   Image data Figure 2: The ITP response packet format (the header and payload)  Header Payload  The size of the payload is equal to the Image size field in the header  Header Payload  Fang (Fiona) Fang       page 4  Winter 2023 Here are the descriptions of the ITP response packet fields:  (V) is a 4-bit ITP version field. You must set this to 7.   The response type is 8-bit value so that the value 0 means “Query”, 1 means “Found to Client”, 2 and 3 are not used in this assignment, and 4 means “Found to Originator”.  Set the sequence number. The sequence number of the first packet is chosen randomly; it is incremented by 1 for each subsequent packet sent out of the server. This field is 20 bits in length and the increment will be performed mod 220.  The timestamp is a 32-bit field has the current value of the server’s timer.   The image size is a 32-bit field which we will need to extract the image data from the packet and display it.   The actual image data (part of the payload) will then follow the image file name field. Below is a running scenario as an example to show the execution of the program and to summarize the requirements of this assignment. Create five different folders in your computer and name them: peer1, peer2, peer3, peer4, and peer5. After creating these folders, copy and paste the provided images as per the map we described in Section 3 above. Also copy your program in all these 5 folders. Open 6 command line windows, and perform the command as shown in the figure below.    Your source code should be fully commented and formatted.  Your project folder structure should be created such that all code for your program and package.json file should be under one folder only named ‘ peer1’. Don’t add the image files.  No need to include the client program, we will use the sample code we developed for assignment1.  Compress this folder in an achieve file (zip file) and name it yourUWOID -SE3314b-assignment3.zip .   Submit this zip file on OWL by the due date mentioned above. 